plugins {
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "6.0.1.5171"
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'ku-rum'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	asciidoctorExt

	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	runtimeOnly 'com.mysql:mysql-connector-j'
  
	// Mail Service
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.apache.httpcomponents.client5:httpclient5:5.2'
	implementation 'org.seleniumhq.selenium:selenium-java:4.12.1'
	implementation 'io.github.bonigarcia:webdrivermanager:5.7.0'

	// Selenium Java
	implementation 'org.seleniumhq.selenium:selenium-java:4.12.1'

	// WebDriver Manager (드라이버 자동 관리)
	implementation 'io.github.bonigarcia:webdrivermanager:5.7.0'
	implementation 'org.jsoup:jsoup:1.15.3'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// RestDocs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//jsoup
	implementation 'org.jsoup:jsoup:1.17.2'

	// elastic search
	implementation 'org.springframework.data:spring-data-elasticsearch'

}
tasks.named('testClasses') { // (1)
	doFirst {
		delete file('build/docs/asciidoc')
	}
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy 'jacocoTestReport'
	finalizedBy asciidoctor
}

tasks.named('asciidoctor') {
	dependsOn test
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	finalizedBy copyDocument
	doFirst {
		delete file('src/main/resources/static/docs')
	}
}

task copyDocument(type: Copy) { // (5)
	dependsOn asciidoctor
	from file('build/docs/asciidoc')
	into file('src/main/resources/static/docs')
}

def querydslSrcDir = 'src/main/generated'

clean {
	delete file(querydslSrcDir)
}

bootJar { // (6)
	dependsOn asciidoctor
	doFirst {
		delete file('static/docs')
	}

	from( "${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

// jacoco 정보
jacoco {
	toolVersion = "0.8.11"
	layout.buildDirectory.dir("reports/jacoco")
}

// jacoco Report 생성
jacocoTestReport {
	dependsOn test // test 종속성 추가

	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	def QDomainList = []
	for (qPattern in '**/QA'..'**/QZ') { // QClass 대응
		QDomainList.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/dto/**',
					'**/event/**',
					'**/*InitData*',
					'**/*Application*',
					'**/exception/**',
					'**/service/alarm/**',
					'**/aop/**',
					'**/config/**',
					'**/MemberRole*'
			] + QDomainList)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification' // jacocoTestReport 태스크가 끝난 후 실행
}

// jacoco Test 유효성 확인
jacocoTestCoverageVerification {
	def QDomainList = []
	for (qPattern in '*.QA'..'*.QZ') { // QClass 대응
		QDomainList.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true // 규칙 활성화 여부
			element = 'CLASS' // 커버리지를 체크할 단위 설정

			// 코드 커버리지를 측정할 때 사용되는 지표
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}

			excludes = [
					'**.dto.**',
					'**.event.**',
					'**.*InitData*',
					'**.*Application*',
					'**.exception.**',
					'**.service.alarm.**',
					'**.aop.**',
					'**.config.**',
					'**.MemberRole*'
			] + QDomainList
		}
	}
}

sonar {
	properties {
		property "sonar.projectKey", "KU-rum_backend"
		property "sonar.organization", "ku-rum"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/index.xml'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		// 테스트 커버리지에서 제외할 클래스
		property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application*.java, **/*Controller*.java, **/*Config.java' +
				'**/*Response.java, **/*Exception.java, **/security/**, **/support/**, **/Q*.java'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'

	}
}
